{
  "SectionId": "3aa2c477-63ee-43ed-9952-1d9f6deea83c",
  "Quests": [
    {
      "Name": "Пролог: Магия циклов и повторений",
      "Description": [
        { "Header": "Мастерская заклинаний повторения" },
        { "Simple": "Йеннифэр вращает магический кристалл, создавая иллюзию бесконечного отражения: 'В мире Python есть две великие силы повторения - циклы for и while. Они позволяют творить магию многократно, не уставая и не ошибаясь.'" },
        { "Header": "Два брата-цикла" },
        { "Simple": "for - когда знаешь, сколько раз нужно повторить заклинание\nwhile - когда повторяешь, пока не исполнится условие\n\nfor i in range(5):\n    print(f'Заклинание #{i}')\n\ncounter = 0\nwhile counter < 3:\n    print(f'Магия работает! {counter}')\n    counter += 1" },
        { "Header": "Сила вложенных циклов" },
        { "Simple": "Как матрёшка в матрёшке, циклы могут жить внутри циклов, создавая сложные узоры и вычисления:\n\nfor i in range(3):\n    for j in range(2):\n        print(f'Позиция: {i},{j}')" },
        { "Simple": "Лютик, экспериментируя с котлом, бормочет: 'Так... for - это как повторять припев песни ровно 3 раза, а while - как петь, пока публика не заснёт?'" },
        { "Simple": "'Приблизительно,' - улыбается Йеннифэр. 'Только в Python публика никогда не засыпает, если ты не скажешь ей остановиться.'" },
        { "Header": "Массивы - сосуды для данных" },
        { "Simple": "numbers = [1, 2, 3, 4, 5]          # Одномерный массив\nmatrix = [[1, 2], [3, 4], [5, 6]]  # Двумерный массив\n\nfor row in matrix:\n    for number in row:\n        print(number)" },
        { "Simple": "'Сегодня,' - говорит Йеннифэр, 'ты научишься создавать заклинания, которые повторяются с математической точностью, обрабатывать целые армии данных и создавать сложные магические структуры.'" },
        { "Simple": "Геральт добавляет, проверяя клинки: 'И помни - бесконечный цикл опаснее, чем бесконечная болтовня Лютика. Всегда предусматривай выход!'" }
      ],
      "Option": [],
      "CorrectAnswer": [],
      "SupportHint": "",
      "SupportAnswer": "",
      "IsCode": false
    },
    {
      "Name": "Задание 1: Анализ вражеских formation",
      "Description": [
        { "Header": "Дозорная вышка" },
        { "Simple": "'Враги выстроились в 4 шеренги по 5 воинов!' - кричит дозорный. 'Нужно определить, в каких шеренгах больше всего элитных воинов (сила > 70).'" },
        { "Simple": "Дан массив formation 4×5. Выбери ВСЕ правильные варианты кода для поиска шеренг с элитными воинами." }
      ],
      "Option": [
        "formation = [[65,80,55,90,75], [70,45,85,60,95], [50,75,65,80,70], [85,90,75,65,80]]\nelite_rows = []\nfor i, row in enumerate(formation):\n    if any(soldier > 70 for soldier in row):\n        elite_rows.append(i)\nprint(elite_rows)",
        "formation = [[65,80,55,90,75], [70,45,85,60,95], [50,75,65,80,70], [85,90,75,65,80]]\nfor row in formation:\n    count = 0\n    for soldier in row:\n        if soldier > 70:\n            count += 1\n    print(count)",
        "formation = [[65,80,55,90,75], [70,45,85,60,95], [50,75,65,80,70], [85,90,75,65,80]]\ni = 0\nwhile i < len(formation):\n    if max(formation[i]) > 70:\n        print(f'Шеренга {i} имеет элитных воинов')\n    i += 1",
        "formation = [[65,80,55,90,75], [70,45,85,60,95], [50,75,65,80,70], [85,90,75,65,80]]\nfor i in range(4):\n    for j in range(5):\n        if formation[i][j] > 70:\n            print(f'Элитный воин на позиции ({i},{j})')"
      ],
      "CorrectAnswer": [
        "formation = [[65,80,55,90,75], [70,45,85,60,95], [50,75,65,80,70], [85,90,75,65,80]]\nelite_rows = []\nfor i, row in enumerate(formation):\n    if any(soldier > 70 for soldier in row):\n        elite_rows.append(i)\nprint(elite_rows)",
        "formation = [[65,80,55,90,75], [70,45,85,60,95], [50,75,65,80,70], [85,90,75,65,80]]\ni = 0\nwhile i < len(formation):\n    if max(formation[i]) > 70:\n        print(f'Шеренга {i} имеет элитных воинов')\n    i += 1"
      ],
      "SupportHint": "Элитные воины есть во всех шеренгах кроме второй (индекс 1)",
      "SupportAnswer": "Правильные варианты находят шеренги с элитными воинами. Первый вариант использует any() для проверки наличия элитных воинов, третий - max() для поиска максимальной силы в шеренге.",
      "IsCode": false
    },
    {
      "Name": "Задание 2: Зеркальное отражение боевых порядков",
      "Description": [
        { "Header": "Северная стена Каэр Морхена" },
        { "Simple": "'Враги выстроились в квадратный строй!' - кричит дозорный. 'Нужно зеркально отразить их formation, чтобы предугадать манёвры! Создай массив N×N и отрази его.'" },
        { "Simple": "Программа должна получить размер formation N, создать массив N×N и зеркально отразить его относительно главной диагонали." },
        { "Simple": "Пример ввода:\n3" },
        { "Simple": "Пример вывода:\n1 4 7\n2 5 8\n3 6 9" },
        { "Simple": "Программа считывает число N через input() и выводит транспонированную матрицу." }
      ],
      "Option": [ "3" ],
      "CorrectAnswer": [
        "1 4 7",
        "2 5 8",
        "3 6 9"
      ],
      "SupportHint": "Используй вложенные циклы для обмена элементами A[i][j] и A[j][i]",
      "SupportAnswer": "n = int(input())\narr = [list(range(i*n+1, i*n+n+1)) for i in range(n)]\n\nfor i in range(n):\n    for j in range(i+1, n):\n        arr[i][j], arr[j][i] = arr[j][i], arr[i][j]\n\nfor row in arr:\n    print(' '.join(map(str, row)))",
      "IsCode": true
    },
    {
      "Name": "Задание 3: Расчет времени до штурма",
      "Description": [
        { "Header": "Комната стратегов" },
        { "Simple": "'Разведка доложила: враги начнут штурм через 5-10 дней!' - говорит Весемир. 'Нужно подготовить график подготовки для каждого дня.'" },
        { "Simple": "Что выведет этот код?\ndays = 5\nwhile days <= 10:\n    if days < 7:\n        print(f'День {days}: Укрепляем стены')\n    elif days == 7:\n        print(f'День {days}: Тренировка лучников')\n    else:\n        print(f'День {days}: Расставляем засады')\n    days += 1" }
      ],
      "Option": [
        "День 5: Укрепляем стены\nДень 6: Укрепляем стены\nДень 7: Тренировка лучников\nДень 8: Расставляем засады\nДень 9: Расставляем засады\nДень 10: Расставляем засады",
        "День 5: Укрепляем стены\nДень 6: Укрепляем стены\nДень 7: Тренировка лучников\nДень 8: Укрепляем стены\nДень 9: Укрепляем стены\nДень 10: Укрепляем стены",
        "День 5: Расставляем засады\nДень 6: Расставляем засады\nДень 7: Тренировка лучников\nДень 8: Укрепляем стены\nДень 9: Укрепляем стены\nДень 10: Укрепляем стены",
        "День 5: Укрепляем стены\nДень 6: Укрепляем стены\nДень 7: Укрепляем стены\nДень 8: Расставляем засады\nДень 9: Расставляем засады\nДень 10: Расставляем засады"
      ],
      "CorrectAnswer": [
        "День 5: Укрепляем стены\nДень 6: Укрепляем стены\nДень 7: Тренировка лучников\nДень 8: Расставляем засады\nДень 9: Расставляем засады\nДень 10: Расставляем засады"
      ],
      "SupportHint": "Цикл while выполняется пока days <= 10, начиная с 5. Условия: <7, ==7, >7",
      "SupportAnswer": "Цикл выполняется для дней от 5 до 10 включительно. Дни 5-6: укрепление стен, день 7: тренировка лучников, дни 8-10: расстановка засад.",
      "IsCode": false
    },
    {
      "Name": "Задание 4: Сигнальные огни на башнях",
      "Description": [
        { "Header": "Главная башня Каэр Морхена" },
        { "Simple": "'Расставьте сигнальные огни в форме треугольника!' - командует Геральт. 'Так лучники будут знать сектора обстрела.'" },
        { "Simple": "Напиши программу, которая считывает высоту треугольника и выводит треугольник из звёздочек." },
        { "Simple": "Пример ввода:\n3" },
        { "Simple": "Пример вывода:\n*\n**\n***" },
        { "Simple": "Программа получает одно число - высоту треугольника, и выводит треугольник построчно." }
      ],
      "Option": [ "3" ],
      "CorrectAnswer": [
        "*",
        "**",
        "***"
      ],
      "SupportHint": "Используй вложенные циклы: внешний для строк, внутренний для количества звёздочек в строке",
      "SupportAnswer": "n = int(input())\nfor i in range(1, n+1):\n    print('*' * i)",
      "IsCode": true
    },
    {
      "Name": "Задание 5: Фильтрация разведданных",
      "Description": [
        { "Header": "Штаб разведки" },
        { "Simple": "'Получены данные о 10 вражеских отрядах. Нужно найти все отряды численностью от 50 до 100 воинов и определить самый крупный.'" },
        { "Simple": "Выбери ОДИН правильный вариант кода для решения задачи." }
      ],
      "Option": [
        "units = [45, 120, 85, 30, 95, 60, 150, 75, 40, 90]\nlarge_units = []\nfor unit in units:\n    if 50 <= unit <= 100:\n        large_units.append(unit)\nprint(f'Крупные отряды: {large_units}')\nprint(f'Самый крупный: {max(large_units)}')",
        "units = [45, 120, 85, 30, 95, 60, 150, 75, 40, 90]\nmax_unit = 0\nfor unit in units:\n    if unit > max_unit:\n        max_unit = unit\nprint(f'Самый крупный отряд: {max_unit}')",
        "units = [45, 120, 85, 30, 95, 60, 150, 75, 40, 90]\ncount = 0\nfor unit in units:\n    if unit >= 50:\n        count += 1\nprint(f'Крупных отрядов: {count}')",
        "units = [45, 120, 85, 30, 95, 60, 150, 75, 40, 90]\ni = 0\nwhile i < len(units):\n    if units[i] < 100:\n        print(units[i])\n    i += 1"
      ],
      "CorrectAnswer": [
        "units = [45, 120, 85, 30, 95, 60, 150, 75, 40, 90]\nlarge_units = []\nfor unit in units:\n    if 50 <= unit <= 100:\n        large_units.append(unit)\nprint(f'Крупные отряды: {large_units}')\nprint(f'Самый крупный: {max(large_units)}')"
      ],
      "SupportHint": "Нужно найти отряды от 50 до 100 воинов и определить максимальный среди них",
      "SupportAnswer": "Правильный вариант фильтрует отряды по диапазону 50-100 и находит максимальный среди отфильтрованных. Крупные отряды: [85, 95, 60, 75, 90], самый крупный: 95.",
      "IsCode": false
    },
    {
      "Name": "Задание 6: Отбор лучников для дальнего боя",
      "Description": [
        { "Header": "Тренировочный двор" },
        { "Simple": "'Среди лучников в возрасте от 20 до 50 лет найди тех, кто меток как эльф, но не упрям как дварф!' - говорит Геральт. 'Тех, кто делится на 3, но не на 5.'" },
        { "Simple": "Напиши программу, которая выводит все числа от 20 до 50, которые делятся на 3, но не делятся на 5." },
        { "Simple": "Программа не получает ввод, а сразу выводит результат." },
        { "Simple": "Пример вывода:\n21\n24\n27\n33\n36\n39\n42\n48" },
        { "Simple": "Каждое число выводится на отдельной строке." }
      ],
      "Option": [],
      "CorrectAnswer": [
        "21",
        "24",
        "27",
        "33",
        "36",
        "39",
        "42",
        "48"
      ],
      "SupportHint": "Используй цикл for от 20 до 50 и проверяй условия: число % 3 == 0 и число % 5 != 0",
      "SupportAnswer": "for num in range(20, 51):\n    if num % 3 == 0 and num % 5 != 0:\n        print(num)",
      "IsCode": true
    },
    {
      "Name": "Задание 7: Анализ боевой эффективности",
      "Description": [
        { "Header": "Зал военных советов" },
        { "Simple": "'У нас есть данные о эффективности 8 заклинаний за 5 дней. Нужно найти день с максимальной средней эффективностью.'" },
        { "Simple": "Отметь ВСЕ верные утверждения о работе с этим массивом." }
      ],
      "Option": [
        "spells = [[80,85,90,75,95], [70,65,80,85,90], [95,90,85,80,75], [60,70,80,90,85], [75,80,85,90,95], [85,80,75,70,65], [90,95,85,80,75], [80,75,70,65,60]]\nfor day in range(5):\n    day_avg = sum(spells[i][day] for i in range(8)) / 8\n    print(f'День {day}: средняя эффективность {day_avg:.1f}')",
        "Можно использовать вложенные циклы для подсчёта суммы по каждому дню",
        "Для нахождения максимального дня нужно хранить текущий максимум и сравнивать с каждой новой суммой",
        "Массив spells[3][2] содержит эффективность 4-го заклинания в 3-й день",
        "Цикл while не подходит для этой задачи"
      ],
      "CorrectAnswer": [
        "spells = [[80,85,90,75,95], [70,65,80,85,90], [95,90,85,80,75], [60,70,80,90,85], [75,80,85,90,95], [85,80,75,70,65], [90,95,85,80,75], [80,75,70,65,60]]\nfor day in range(5):\n    day_avg = sum(spells[i][day] for i in range(8)) / 8\n    print(f'День {day}: средняя эффективность {day_avg:.1f}')",
        "Можно использовать вложенные циклы для подсчёта суммы по каждому дню",
        "Для нахождения максимального дня нужно хранить текущий максимум и сравнивать с каждой новой суммой"
      ],
      "SupportHint": "spells[i][day] - эффективность i-го заклинания в day-й день",
      "SupportAnswer": "Правильные утверждения описывают корректные способы работы с массивом. Первый вариант вычисляет среднюю эффективность по дням, второй и третий - альтернативные подходы к решению.",
      "IsCode": false
    },
    {
      "Name": "Задание 8: Расстановка оборонительных отрядов",
      "Description": [
        { "Header": "Главные ворота крепости" },
        { "Simple": "'Расставь отряды по особым правилам!' - объясняет Йеннифэр. 'На диагонали - элитные воины (1), выше - лучники (0), ниже - пехота (2).'" },
        { "Simple": "Напиши программу, которая считывает размер поля N и создает массив N×N по правилу:\n- Диагональ из правого верхнего в левый нижний = 1\n- Выше диагонали = 0\n- Ниже диагонали = 2" },
        { "Simple": "Пример ввода:\n4" },
        { "Simple": "Пример вывода:\n0 0 0 1\n0 0 1 2\n0 1 2 2\n1 2 2 2" },
        { "Simple": "Программа получает число N и выводит матрицу N×N с пробелами между числами." }
      ],
      "Option": [ "4" ],
      "CorrectAnswer": [
        "0 0 0 1",
        "0 0 1 2",
        "0 1 2 2",
        "1 2 2 2"
      ],
      "SupportHint": "Для элемента A[i][j] условие на диагонали: i + j == n-1",
      "SupportAnswer": "n = int(input())\narr = [[0] * n for _ in range(n)]\n\nfor i in range(n):\n    for j in range(n):\n        if i + j == n - 1:\n            arr[i][j] = 1\n        elif i + j > n - 1:\n            arr[i][j] = 2\n        else:\n            arr[i][j] = 0\n\nfor row in arr:\n    print(' '.join(map(str, row)))",
      "IsCode": true
    },
    {
      "Name": "Эпилог: Каэр Морхен устоял",
      "Description": [
        { "Header": "Рассвет после битвы" },
        { "Simple": "Геральт стоит на дымящихся стенах, глядя на отступающие нильфгаардские знамёна: 'Твои расчеты спасли крепость. Циклы и массивы оказались нашим тайным оружием.'" },
        { "Simple": "Йеннифэр, устало опираясь на посох: 'For для систематических действий, while для упорной обороны, массивы для организации - ты освоил основы программирования в огне битвы.'" },
        { "Simple": "Лютик, перевязывая рану: 'А я теперь понимаю - программирование это как писать песни. For - куплеты, while - припев, а массивы... э-э-э... ноты!'" },
        { "Header": "Что ты освоил:" },
        { "Simple": "• Циклы for для перебора известных последовательностей\n• Циклы while для действий по условию\n• Одномерные массивы для линейных данных\n• Двумерные массивы для табличных данных\n• Фильтрацию и поиск в массивах\n• Вложенные циклы для работы с матрицами" },
        { "Simple": "Цири кладёт руку на твое плечо: 'Ты спас Каэр Морхен. Теперь ты не просто программист - ты стратег, способный превратить код в оружие.'" }
      ],
      "Option": [],
      "CorrectAnswer": [],
      "SupportHint": "",
      "SupportAnswer": "",
      "IsCode": false
    }
  ]
}