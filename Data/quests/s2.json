{
  "SectionId": "d5858598-c3f0-4dbd-930d-d4eb67f79e5d",
  "Quests": [
    {
      "Name": "Пролог: Магия переменных и типов",
      "Description": [
        { "Header": "Библиотека Каэр Морхена" },
        { "Simple": "Йеннифэр разворачивает древний свиток: 'Геральт, чтобы противостоять Вильгефорцу, твой помощник должен освоить переменные - сосуды для хранения силы. Без них даже простое заклинание не сработает.'" },
        { "Header": "Четыре стихии данных" },
        { "Simple": "str - строка: текст в кавычках, как имена и заклинания\nint - целое число: количество противников, возраст\nfloat - дробное число: доза зелья, расстояние\nbool - истина/ложь: жив ли монстр, активирована ли защита" },
        { "Simple": "input() ВСЕГДА возвращает строку! Для чисел:\nmonsters = int(input('Сколько монстров: '))\ndose = float(input('Доза зелья: '))" },
        { "Header": "Переменные - сосуды для магии" },
        { "Simple": "Переменная - это как сосуд для зелья или именной свиток:\nname = \"Геральт\"          # Создал сосуд с именем\nstrength = 95             # Наполнил силой\nname = \"Ведьмак\"          # Перезаписал содержимое" },
        { "Simple": "Можно узнать тип содержимого сосуда:\nprint(type(name))         # Покажет: <class 'str'>\nprint(type(strength))     # Покажет: <class 'int'>" },
        { "Header": "Ссылки - магические связи" },
        { "Simple": "Когда создаешь новую переменную из старой:\noriginal = \"серебряный меч\"\ncopy = original           # Оба сосуда указывают на одно содержимое\n\noriginal = \"стальной меч\"  # Теперь original новый, copy остался старый" },
        { "Simple": "Для чисел и строк копирование безопасно, но для списков - осторожнее!" },
        { "Header": "Преобразование типов - алхимия данных" },
        { "Simple": "str() - превращает в строку, как заклинание окаменения\nint() - превращает в целое число, отсекая дробную часть\nfloat() - превращает в дробное число\nbool() - превращает в истину/ложь (0=False, все остальное=True)" },
        { "Simple": "Примеры алхимии:\nage = 25\nprint('Мне ' + str(age) + ' лет')  # Превратил число в строку\n\nhealth = 75.8\nprint(int(health))                 # 75 (отсек дробную часть)\n\nname = \"\"\nprint(bool(name))                  # False (пустая строка)" },
        { "Header": "Проверка типов - детектор магии" },
        { "Simple": "isinstance() - проверяет тип сосуда:\nmonsters = 5\nprint(isinstance(monsters, int))   # True\nprint(isinstance(monsters, str))   # False" },
        { "Header": "Как работать с задачами" },
        { "Simple": "В задачах с кодом ты увидишь поля ввода (Option) и ожидаемый вывод (CorrectAnswer). Твоя программа должна запрашивать данные через input() и выводить результат через print(), как в примерах." },
        { "Simple": "'Вильгефорц собирает армию,' - хмурится Геральт. 'Нужно проанализировать разведданные и правильно классифицировать всю информацию. От этого зависит исход битвы.'" },
        { "Simple": "Лютик задумчиво: 'Так... если я правильно понял, переменные - это как названия песен в моем репертуаре, а типы - это баллады это или похабные частушки?'" },
        { "Simple": "'Приблизительно так,' - улыбается Йеннифэр. 'Только без похабных частушек в наших свитках.'" }
      ],
      "Option": [],
      "CorrectAnswer": [],
      "SupportHint": "",
      "SupportAnswer": "",
      "IsCode": false
    },
    {
      "Name": "Задание 1: Идентификация магических существ",
      "Description": [
        { "Header": "Лаборатория алхимика" },
        { "Simple": "Трисс показывает на магический кристалл: 'Определи тип данных для каждой характеристики существ. Помни - от правильной классификации зависит эффективность зелий!'" },
        { "Simple": "Выбери ПРАВИЛЬНЫЕ соответствия между характеристиками и типами данных Python. Отметь все верные варианты." }
      ],
      "Option": [
        "Имя существа - str",
        "Количество глаз - float",
        "Высота в метрах - float",
        "Является ли опасным - bool",
        "Вес в килограммах - int",
        "Уровень угрозы от 1 до 10 - int",
        "Название заклинания - bool",
        "Присутствует ли в регионе - bool"
      ],
      "CorrectAnswer": [
        "Имя существа - str",
        "Высота в метрах - float",
        "Является ли опасным - bool",
        "Уровень угрозы от 1 до 10 - int",
        "Присутствует ли в регионе - bool"
      ],
      "SupportHint": "Вспомни: str для текста, int для целых чисел, float для дробных, bool для да/нет.",
      "SupportAnswer": "Правильные соответствия:\n- Имя существа - str (текст)\n- Высота в метрах - float (дробное число)\n- Является ли опасным - bool (да/нет)\n- Уровень угрозы от 1 до 10 - int (целое число)\n- Присутствует ли в регионе - bool (да/нет)\n\nНеправильные:\n- Количество глаз - int (должно быть целое число)\n- Вес в килограммах - float (может быть дробным)\n- Название заклинания - str (должно быть текст)",
      "IsCode": false
    },
    {
      "Name": "Задание 2: Анализ разведдонесения",
      "Description": [
        { "Header": "Комната военного совета" },
        { "Simple": "Геральт изучает карту: 'Разведка донесла о передвижениях Вильгефорца. Нужно определить, какие переменные нужны для анализа и какого они типа.'" },
        { "Simple": "Выбери ОДИН правильный вариант объявления переменных для системы отслеживания передвижений армии Вильгефорца." }
      ],
      "Option": [
        "location = 'Северная башня'; strength = 150; is_moving = True; distance = 15.7",
        "location = 'Северная башня'; strength = '150'; is_moving = 'да'; distance = '15.7'",
        "location = Северная башня; strength = 150; is_moving = да; distance = 15.7",
        "location = 'Северная башня'; strength = 150.0; is_moving = 'True'; distance = 15",
        "var location = 'Северная башня'; var strength = 150; var is_moving = True",
        "location: str = 'Северная башня'; strength: int = 150; is_moving: bool = True"
      ],
      "CorrectAnswer": [
        "location = 'Северная башня'; strength = 150; is_moving = True; distance = 15.7"
      ],
      "SupportHint": "Правильный синтаксис Python: строки в кавычках, bool без кавычек, числа без кавычек.",
      "SupportAnswer": "Правильный ответ: location = 'Северная башня'; strength = 150; is_moving = True; distance = 15.7\n\nОбъяснение:\n- location: str - строка в кавычках\n- strength: int - целое число без кавычек  \n- is_moving: bool - True/False без кавычек\n- distance: float - дробное число\n\nОстальные варианты содержат ошибки: строки без кавычек, числа в кавычках, неправильный синтаксис.",
      "IsCode": false
    },
    {
      "Name": "Задание 3: Создание зелья защиты",
      "Description": [
        { "Header": "Алхимическая лаборатория" },
        { "Simple": "Лютик суетливо перемешивает ингредиенты: 'Быстрее! Нужно создать зелье защиты от чар Вильгефорца! Напиши программу, которая запросит параметры и выведет сертификат зелья.'" },
        { "Simple": "ПРОГРАММА ДОЛЖНА:\n1. Запросить у пользователя ввод данных по очереди\n2. Преобразовать ввод к правильным типам\n3. Рассчитать силу зелья\n4. Вывести красивый сертификат" },
        { "Header": "КАК РАБОТАЕТ ПРОГРАММА:" },
        { "Simple": "1. ПРОГРАММА ВЫВОДИТ приглашение: 'Название зелья: '\n2. ПОЛЬЗОВАТЕЛЬ ВВОДИТ: 'Щит магии' и нажимает Enter\n3. ПРОГРАММА ВЫВОДИТ: 'Основной ингредиент: '\n4. ПОЛЬЗОВАТЕЛЬ ВВОДИТ: 'порошок обсидиана' и нажимает Enter\n5. ПРОГРАММА ВЫВОДИТ: 'Количество капель: '\n6. ПОЛЬЗОВАТЕЛЬ ВВОДИТ: '20' и нажимает Enter\n7. ПРОГРАММА ВЫВОДИТ: 'Концентрация: '\n8. ПОЛЬЗОВАТЕЛЬ ВВОДИТ: '2.5' и нажимает Enter\n9. ПРОГРАММА ВЫВОДИТ: 'Экспериментальное (1(True)/0(False)): '\n10. ПОЛЬЗОВАТЕЛЬ ВВОДИТ: '0' и нажимает Enter\n11. ПРОГРАММА ВЫВОДИТ сертификат зелья" },
        { "Header": "ПРИМЕР ПОЛНОГО ВЗАИМОДЕЙСТВИЯ:" },
        { "Simple": "Название зелья: Щит магии\nОсновной ингредиент: порошок обсидиана\nКоличество капель: 20\nКонцентрация: 2.5\nЭкспериментальное (1(True)/0(False)): 0\n\nНазвание: Щит магии (str)\nИнгредиент: порошок обсидиана (str)\nКапли: 20 (int)\nКонцентрация: 2.5 (float)\nЭкспериментальное: False (bool)\nСила защиты: 50.0\nЗелье готово к применению!" },
        { "Header": "ВАЖНО:" },
        { "Simple": "• Программа использует input() С приглашениями\n• Для экспериментального зелья: 1=True, 0=False\n• Все приглашения выводятся в одной строке подряд\n• Сертификат выводится после ввода всех данных\n• В Option указаны ТОЛЬКО данные для ввода (без приглашений)" }
      ],
      "Option": [ "Щит магии", "порошок обсидиана", "20", "2.5", "0" ],
      "CorrectAnswer": [
        "Название зелья: Основной ингредиент: Количество капель: Концентрация: Экспериментальное (1(True)/0(False)): Название: Щит магии (str)",
        "Ингредиент: порошок обсидиана (str)",
        "Капли: 20 (int)",
        "Концентрация: 2.5 (float)",
        "Экспериментальное: False (bool)",
        "Сила защиты: 50.0",
        "Зелье готово к применению!"
      ],
      "SupportHint": "Используй input() с приглашениями, int() и float() для преобразования, bool(int(input())) для экспериментального. Формула силы: капли × концентрация",
      "SupportAnswer": "name = input('Название зелья: ')\ningredient = input('Основной ингредиент: ')\ndrops = int(input('Количество капель: '))\nconcentration = float(input('Концентрация: '))\nexperimental = bool(int(input('Экспериментальное (1(True)/0(False)): ')))\n\npower = drops * concentration\n\nprint('Название: ' + name + ' (str)')\nprint('Ингредиент: ' + ingredient + ' (str)')\nprint('Капли: ' + str(drops) + ' (int)')\nprint('Концентрация: ' + str(concentration) + ' (float)')\nprint('Экспериментальное: ' + str(experimental) + ' (bool)')\nprint('Сила защиты: ' + str(power))\nprint('Зелье готово к применению!')",
      "IsCode": true
    },
    {
      "Name": "Задание 4: Расчет стратегии боя",
      "Description": [
        { "Header": "Карта сражения у стен Каэр Морхена" },
        { "Simple": "Геральт изучает карту: 'Вильгефорц имеет 300 воинов. У нас всего 100, но с правильной тактикой и поддержкой магов мы можем победить. Напиши программу анализа битвы!'" },
        { "Simple": "ПРОГРАММА ДОЛЖНА:\n1. Последовательно запросить все параметры битвы\n2. Рассчитать шансы по формуле\n3. Определить возможность победы\n4. Вывести детальный анализ\n\nФОРМУЛА: шансы = (наши_воины × множитель_тактики) / враги\nПобеда возможна если: шансы > 0.3 И есть поддержка магов" },
        { "Simple": "Пример ввода (только данные, без приглашений):\n100\n300\n1.5\n1\nОбход с фланга" },
        { "Simple": "Пример вывода (только результат программы):\nТактика: Обход с фланга\nНаши силы: 100\nВражеские силы: 300\nМножитель тактики: 1.5\nПоддержка магов: True\nШансы на победу: 0.5\nПобеда возможна: True\nВ бой!" },
        { "Simple": "Программа должна использовать input() БЕЗ текста приглашения. Для поддержки магов: 1=True, 0=False" }
      ],
      "Option": [ "100", "300", "1.5", "1", "Обход с фланга" ],
      "CorrectAnswer": [
        "Тактика: Обход с фланга",
        "Наши силы: 100",
        "Вражеские силы: 300",
        "Множитель тактики: 1.5",
        "Поддержка магов: True",
        "Шансы на победу: 0.5",
        "Победа возможна: True",
        "В бой!"
      ],
      "SupportHint": "Используй int() для воинов, float() для множителя, bool(int(input())) для проверки магов",
      "SupportAnswer": "our_troops = int(input())\nenemy_troops = int(input())\ntactic_multiplier = float(input())\nmage_support = bool(int(input()))\ntactic_name = input()\n\nchances = (our_troops * tactic_multiplier) / enemy_troops\nvictory_possible = chances > 0.3 and mage_support\n\nprint('Тактика:', tactic_name)\nprint('Наши силы:', our_troops)\nprint('Вражеские силы:', enemy_troops)\nprint('Множитель тактики:', tactic_multiplier)\nprint('Поддержка магов:', mage_support)\nprint('Шансы на победу:', chances)\nprint('Победа возможна:', victory_possible)\nif victory_possible:\n    print('В бой!')\nelse:\n    print('Нужно отступить!')",
      "IsCode": true
    },
    {
      "Name": "Задание 5: Финальная подготовка миссии",
      "Description": [
        { "Header": "Штаб операции" },
        { "Simple": "Йеннифэр заканчивает магический круг: 'Все готово для штурма башни Вильгефорца! Напиши программу проверки всех параметров миссии.'" },
        { "Simple": "ПРОГРАММА ДОЛЖНА:\n1. Запросить все параметры миссии\n2. Рассчитать эффективность\n3. Проверить условия одобрения\n4. Вывести полный отчет\n\nФОРМУЛА: эффективность = бюджет / (отряды × длительность)\nОдобрение: эффективность < 500 И вероятность_успеха > 0.6" },
        { "Simple": "Пример ввода (только данные, без приглашений):\nГром среди ясного неба\n5\n4500.75\n1\n3\n0.85\n45.123, 12.456" },
        { "Simple": "Пример вывода (только результат программы):\nОперация: Гром среди ясного неба\nОтряды: 5\nБюджет: 4500.75\nСрочная: True\nДлительность: 3 дня\nВероятность успеха: 0.85\nКоординаты: 45.123, 12.456\nЭффективность: 300.05\nМиссия одобрена: True\nНачинаем операцию!" },
        { "Simple": "Программа должна использовать input() БЕЗ текста приглашения, только для чтения данных." }
      ],
      "Option": [ "Гром среди ясного неба", "5", "4500.75", "1", "3", "0.85", "45.123, 12.456" ],
      "CorrectAnswer": [
        "Операция: Гром среди ясного неба",
        "Отряды: 5",
        "Бюджет: 4500.75",
        "Срочная: True",
        "Длительность: 3 дня",
        "Вероятность успеха: 0.85",
        "Координаты: 45.123, 12.456",
        "Эффективность: 300.05",
        "Миссия одобрена: True",
        "Начинаем операцию!"
      ],
      "SupportHint": "Для эффективности: budget / (squads * duration), для одобрения: efficiency < 500 and success_chance > 0.6. Используй bool(int(input())) для срочной миссии. Не забудь округлить эффективность до 2 знаков!",
      "SupportAnswer": "operation = input()\nsquads = int(input())\nbudget = float(input())\nurgent = bool(int(input()))\nduration = int(input())\nsuccess_chance = float(input())\ncoordinates = input()\n\nefficiency = budget / (squads * duration)\napproved = efficiency < 500 and success_chance > 0.6\n\nprint('Операция:', operation)\nprint('Отряды:', squads)\nprint('Бюджет:', budget)\nprint('Срочная:', urgent)\nprint('Длительность:', duration, 'дня')\nprint('Вероятность успеха:', success_chance)\nprint('Координаты:', coordinates)\nprint('Эффективность:', round(efficiency, 2))\nprint('Миссия одобрена:', approved)\nif approved:\n    print('Начинаем операцию!')\nelse:\n    print('Миссия требует доработки!')",
      "IsCode": true
    },
    {
      "Name": "Эпилог: Сила типизации",
      "Description": [
        { "Header": "Перед штурмом" },
        { "Simple": "Геральт проверяет серебряный меч: 'Ты хорошо освоил переменные и типы. Помни - правильное хранение данных определяет исход битвы. Числа для расчетов, строки для заклинаний, булевы значения для решений.'" },
        { "Header": "Что ты освоил:" },
        { "Simple": "• 4 основных типа данных Python\n• Преобразование input() в нужные типы\n• Использование переменных в расчетах\n• Проверку условий с помощью bool\n• Комбинирование разных типов данных" },
        { "Header": "К новым победам" },
        { "Simple": "'Теперь,' - говорит Йеннифэр, зажигая магические сферы, 'ты готов к арифметическим операциям. Без них не рассчитать ни урон, ни защиту, ни силу заклинаний!' Геральт кивает: 'В бой!'" }
      ],
      "Option": [],
      "CorrectAnswer": [],
      "SupportHint": "",
      "SupportAnswer": "",
      "IsCode": false
    }
  ]
}