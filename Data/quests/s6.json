{
  "SectionId": "0df25efd-d7c6-4140-bde4-210c680585b9",
  "Quests": [
    {
      "Name": "Пролог: Искусство строковых заклинаний",
      "Description": [
        { "Header": "Библиотека словесной магии" },
        { "Simple": "'Строки - это не просто текст, это заклинания, имена, команды и знания,' - говорит Йеннифэр, проводя рукой по древним фолиантам. 'В Python строки обладают собственной магией - конкатенацией, индексацией и методами.'" },
        { "Header": "Три столпа строковой магии" },
        { "Simple": "Конкатенация: объединение строк через '+' или f-строки\nИндексация: обращение к символам по индексам [0], [1], [-1]\nМетоды: встроенные функции для работы со строками" },
        { "Simple": "Важные методы:\n• upper()/lower() - преобразование регистра\n• strip() - удаление пробелов\n• split() - разделение на список\n• find()/index() - поиск подстроки\n• replace() - замена части строки\n• len() - длина строки" },
        { "Simple": "'Сегодня,' - говорит Йеннифэр, 'ты научишься создавать заклинания, анализировать тексты и извлекать знания из строк, как настоящий маг слов.'" }
      ],
      "Option": [],
      "CorrectAnswer": [],
      "SupportHint": "",
      "SupportAnswer": "",
      "IsCode": false
    },
    {
      "Name": "Задание 1: Создание магического приветствия",
      "Description": [
        { "Header": "Круг вызова духов" },
        { "Simple": "'Для призыва духа нужно составить заклинание: \"Приветствую, [имя] из [место]! Да пребудет с тобой сила [стихия]!\"'" },
        { "Simple": "Что выведет этот код?\nname = 'Геральт'\nplace = 'Ривия'\nelement = 'огня'\n\nspell = 'Приветствую, ' + name + ' из ' + place + '! Да пребудет с тобой сила ' + element + '!'\nprint(spell)\nprint(f'Длина заклинания: {len(spell)} символов')\nprint(f'Первый символ: {spell[0]}')\nprint(f'Последний символ: {spell[-1]}')" }
      ],
      "Option": [
        "Приветствую, Геральт из Ривия! Да пребудет с тобой сила огня!\nДлина заклинания: 65 символов\nПервый символ: П\nПоследний символ: !",
        "Приветствую, Геральт из Ривия! Да пребудет с тобой сила огня!\nДлина заклинания: 64 символа\nПервый символ: П\nПоследний символ: !",
        "Приветствую, Геральт из Ривия! Да пребудет с тобой сила огня!\nДлина заклинания: 65 символов\nПервый символ: Г\nПоследний символ: а",
        "Приветствую, Геральт из Ривия! Да пребудет с тобой сила огня!\nДлина заклинания: 62 символа\nПервый символ: П\nПоследний символ: !"
      ],
      "CorrectAnswer": [
        "Приветствую, Геральт из Ривия! Да пребудет с тобой сила огня!\nДлина заклинания: 65 символов\nПервый символ: П\nПоследний символ: !"
      ],
      "SupportHint": "Посчитай все символы в получившейся строке, включая пробелы и знаки препинания",
      "SupportAnswer": "Правильный ответ: Приветствую, Геральт из Ривия! Да пребудет с тобой сила огня!\nДлина заклинания: 65 символов\nПервый символ: П\nПоследний символ: !\n\nПошаговое выполнение:\n1. Конкатенация создает строку: \"Приветствую, Геральт из Ривия! Да пребудет с тобой сила огня!\"\n2. len(spell) считает ВСЕ символы: 65\n3. spell[0] - первый символ 'П'\n4. spell[-1] - последний символ '!'",
      "IsCode": false
    },
    {
      "Name": "Задание 2: Анализ магического свитка",
      "Description": [
        { "Header": "Архив древних рукописей" },
        { "Simple": "'Свиток содержит: \"Огненный шар - урон 45, Ледяная стрела - урон 38, Удар молнии - урон 52\"'. Нужно извлечь названия заклинаний.'" },
        { "Simple": "Отметь ВСЕ правильные варианты извлечения названий заклинаний из текста." }
      ],
      "Option": [
        "text = 'Огненный шар - урон 45, Ледяная стрела - урон 38, Удар молнии - урон 52'\nspells = text.split(',')\nnames = [s.split('-')[0].strip() for s in spells]\nprint(names)",
        "text = 'Огненный шар - урон 45, Ледяная стрела - урон 38, Удар молнии - урон 52'\nprint(text[:14], text[22:36], text[49:61])",
        "text = 'Огненный шар - урон 45, Ледяная стрела - урон 38, Удар молнии - урон 52'\nprint(text.split('-')[0], text.split('-')[2], text.split('-')[4])",
        "text = 'Огненный шар - урон 45, Ледяная стрела - урон 38, Удар молнии - урон 52'\nspells = text.replace(' - урон', '').split(',')\nprint([s.strip() for s in spells])",
        "text = 'Огненный шар - урон 45, Ледяная стрела - урон 38, Удар молнии - урон 52'\nprint(text[0:13] + text[22:35] + text[49:60])",
        "text = 'Огненный шар - урон 45, Ледяная стрела - урон 38, Удар молнии - урон 52'\nprint(text.find('Огненный'), text.find('Ледяная'), text.find('Удар'))"
      ],
      "CorrectAnswer": [
        "text = 'Огненный шар - урон 45, Ледяная стрела - урон 38, Удар молнии - урон 52'\nspells = text.split(',')\nnames = [s.split('-')[0].strip() for s in spells]\nprint(names)",
        "text = 'Огненный шар - урон 45, Ледяная стрела - урон 38, Удар молнии - урон 52'\nspells = text.replace(' - урон', '').split(',')\nprint([s.strip() for s in spells])"
      ],
      "SupportHint": "Нужно разделить строку по запятым, затем убрать части с уроном",
      "SupportAnswer": "Правильные варианты:\n\n1. split(',') разделяет на три части, затем split('-')[0] берет часть до тире, strip() убирает пробелы\n   Результат: ['Огненный шар', 'Ледяная стрела', 'Удар молнии'] ✓\n\n2. replace(' - урон', '') удаляет шаблон с уроном, затем split(',') разделяет по запятым\n   Результат: ['Огненный шар 45', 'Ледяная стрела 38', 'Удар молнии 52'] ✗ (остались цифры)\n\n3. text.split('-')[0], text.split('-')[2], text.split('-')[4] ✗\n   split('-') разделит строку на 5 частей, но индексы не соответствуют названиям\n\n4. text[:14], text[22:36], text[49:61] ✗\n   Срезы могут работать, но требуют точного подсчета позиций\n\n5. replace(' - урон', '') удаляет шаблон, split(',') разделяет, strip() убирает пробелы\n   Результат: ['Огненный шар 45', 'Ледяная стрела 38', 'Удар молнии 52'] ✗ (остались цифры)\n\n6. find() возвращает позиции, а не подстроки ✗",
      "IsCode": false
    },
    {
      "Name": "Задание 3: Расшифровка тайного послания",
      "Description": [
        { "Header": "Кабинет криптографии" },
        { "Simple": "'Послание: \"СМЕРТЬ ВИЛЬГЕФОРЦУ ОТ ВЕДЬМАКОВ\". Нужно преобразовать его в нижний регистр и найти позицию слова \"ВЕДЬМАКОВ\".'" },
        { "Simple": "Что выведет этот код?\nmessage = 'СМЕРТЬ ВИЛЬГЕФОРЦУ ОТ ВЕДЬМАКОВ'\n\nlower_msg = message.lower()\nfind_pos = message.find('ВЕДЬМАКОВ')\nindex_pos = message.index('ВЕДЬМАКОВ')\n\nprint(f'Исходное: {message}')\nprint(f'В нижнем регистре: {lower_msg}')\nprint(f'find() позиция: {find_pos}')\nprint(f'index() позиция: {index_pos}')\nprint(f'Длина: {len(message)}')\nprint(f'Слово ВЕДЬМАКОВ: {message[17:26]}')" }
      ],
      "Option": [
        "Исходное: СМЕРТЬ ВИЛЬГЕФОРЦУ ОТ ВЕДЬМАКОВ\nВ нижнем регистре: смерть вильгефорцу от ведьмаков\nfind() позиция: 17\nindex() позиция: 17\nДлина: 31\nСлово ВЕДЬМАКОВ: ВЕДЬМАКОВ",
        "Исходное: СМЕРТЬ ВИЛЬГЕФОРЦУ ОТ ВЕДЬМАКОВ\nВ нижнем регистре: смерть вильгефорцу от ведьмаков\nfind() позиция: 18\nindex() позиция: 18\nДлина: 30\nСлово ВЕДЬМАКОВ: ВЕДЬМАКО",
        "Исходное: СМЕРТЬ ВИЛЬГЕФОРЦУ ОТ ВЕДЬМАКОВ\nВ нижнем регистре: СМЕРТЬ ВИЛЬГЕФОРЦУ ОТ ВЕДЬМАКОВ\nfind() позиция: 17\nindex() позиция: 17\nДлина: 31\nСлово ВЕДЬМАКОВ: ВЕДЬМАКОВ",
        "Исходное: СМЕРТЬ ВИЛЬГЕФОРЦУ ОТ ВЕДЬМАКОВ\nВ нижнем регистре: смерть вильгефорцу от ведьмаков\nfind() позиция: -1\nindex() позиция: 17\nДлина: 31\nСлово ВЕДЬМАКОВ: ВЕДЬМАКОВ"
      ],
      "CorrectAnswer": [
        "Исходное: СМЕРТЬ ВИЛЬГЕФОРЦУ ОТ ВЕДЬМАКОВ\nВ нижнем регистре: смерть вильгефорцу от ведьмаков\nfind() позиция: 17\nindex() позиция: 17\nДлина: 31\nСлово ВЕДЬМАКОВ: ВЕДЬМАКОВ"
      ],
      "SupportHint": "Индексация начинается с 0. 'ВЕДЬМАКОВ' начинается с позиции 17, длина слова 9 символов",
      "SupportAnswer": "Правильный ответ: Исходное: СМЕРТЬ ВИЛЬГЕФОРЦУ ОТ ВЕДЬМАКОВ\nВ нижнем регистре: смерть вильгефорцу от ведьмаков\nfind() позиция: 17\nindex() позиция: 17\nДлина: 31\nСлово ВЕДЬМАКОВ: ВЕДЬМАКОВ\n\nПошаговое выполнение:\n1. lower() преобразует все символы в нижний регистр\n2. find('ВЕДЬМАКОВ') и index('ВЕДЬМАКОВ') находят позицию 17\n3. len(message) = 31 символ\n4. message[17:26] - срез с 17 по 25 позицию (26 не включается) = 'ВЕДЬМАКОВ'",
      "IsCode": false
    },
    {
      "Name": "Задание 4: Создание системы категорий заклинаний",
      "Description": [
        { "Header": "Библиотека магической классификации" },
        { "Simple": "'Нужно создать систему тегов для заклинаний. Формат: \"[элемент]_[тип]_[уровень]\". Например: \"fire_attack_3\"'" },
        { "Simple": "Какой код правильно создаст и проанализирует теги заклинаний? Выбери ОДИН вариант." }
      ],
      "Option": [
        "element = 'ice'\ntype = 'defense'\nlevel = '2'\ntag = element + '_' + type + '_' + level\nprint(f'Тег: {tag}')\nprint(f'Части: {tag.split('_')}')\nprint(f'В верхнем регистре: {tag.upper()}')\nprint(f'Начинается с ice: {tag.startswith('ice')}')",
        "spell_data = ['lightning', 'attack', '5']\ntag = '_'.join(spell_data)\nprint(f'Тег: {tag}')\nprint(f'Длина: {len(tag)}')\nprint(f'Замена attack на strike: {tag.replace('attack', 'strike')}')\nprint(f'Содержит lightning: {'lightning' in tag}')",
        "tag = 'water_heal_1'\nparts = tag.partition('_')\nprint(f'Тег: {tag}')\nprint(f'Разделение: {parts}')\nprint(f'Элемент: {parts[0]}')\nprint(f'Уровень: {tag[-1]}')",
        "Все варианты верны",
        "Первый и второй варианты верны"
      ],
      "CorrectAnswer": [
        "Все варианты верны"
      ],
      "SupportHint": "Все варианты демонстрируют разные методы работы со строками",
      "SupportAnswer": "Правильный ответ: Все варианты верны\n\nВсе варианты корректно работают со строками:\n\n1. Конкатенация через +, split(), upper(), startswith() ✓\n   Вывод: Тег: ice_defense_2\n   Части: ['ice', 'defense', '2']\n   В верхнем регистре: ICE_DEFENSE_2\n   Начинается с ice: True\n\n2. join() для объединения, replace(), проверка вхождения ✓\n   Вывод: Тег: lightning_attack_5\n   Длина: 17\n   Замена: lightning_strike_5\n   Содержит lightning: True\n\n3. partition() для разделения, индексация для получения уровня ✓\n   Вывод: Тег: water_heal_1\n   Разделение: ('water', '_', 'heal_1')\n   Элемент: water\n   Уровень: 1\n\nВсе методы демонстрируют разные подходы к работе со строками.",
      "IsCode": false
    },
    {
      "Name": "Задание 5: Анализ боевых донесений",
      "Description": [
        { "Header": "Штаб военной разведки" },
        { "Simple": "'Донесение: \"Атака отбита. Потери: 12 лучников, 8 мечников, 3 мага. Убито: 45 пехотинцев, 15 лучников, 2 рыцаря.\"'" },
        { "Simple": "Отметь ВСЕ верные утверждения о работе со строкой донесения." }
      ],
      "Option": [
        "report.find('лучников') вернет позицию первого вхождения",
        "report.count('лучников') вернет 2",
        "report.upper().find('АТАКА') вернет 0",
        "report.replace('отбита', 'успешна') изменит первое предложение",
        "report.split('.') создаст список из 3 элементов",
        "len(report) примерно равен 80 символам",
        "report[-10:] вернет '2 рыцаря.'"
      ],
      "CorrectAnswer": [
        "report.find('лучников') вернет позицию первого вхождения",
        "report.count('лучников') вернет 2",
        "report.upper().find('АТАКА') вернет 0",
        "report.replace('отбита', 'успешна') изменит первое предложение",
        "report.split('.') создаст список из 3 элементов"
      ],
      "SupportHint": "Строка: \"Атака отбита. Потери: 12 лучников, 8 мечников, 3 мага. Убито: 45 пехотинцев, 15 лучников, 2 рыцаря.\"",
      "SupportAnswer": "Правильные утверждения:\n\n1. find('лучников') вернет позицию первого вхождения (в слове 'лучников' в части про потери) ✓\n\n2. count('лучников') вернет 2 (в потерях и в убитых) ✓\n\n3. upper().find('АТАКА') - upper() переведет в верхний регистр, find('АТАКА') найдет с позиции 0 ✓\n\n4. replace('отбита', 'успешна') заменит в первом предложении ✓\n\n5. split('.') разделит по точкам на 3 элемента (последний - пустая строка) ✓\n\nНеправильные:\n- len(report) ≈ 80 - фактически длина около 70 символов ✗\n- report[-10:] - последние 10 символов, но '2 рыцаря.' имеет другую длину ✗",
      "IsCode": false
    },
    {
      "Name": "Задание 6: Создание системы паролей",
      "Description": [
        { "Header": "Комната заклинаний защиты" },
        { "Simple": "'Пароль должен быть не менее 8 символов, содержать цифры и заглавные буквы. Пароль: \"Witcher3Best\"'" },
        { "Simple": "Что выведет этот код?\npassword = 'Witcher3Best'\n\nlength_ok = len(password) >= 8\nhas_digit = any(char.isdigit() for char in password)\nhas_upper = any(char.isupper() for char in password)\nhas_lower = any(char.islower() for char in password)\n\nprint(f'Пароль: {password}')\nprint(f'Длина: {len(password)}')\nprint(f'Достаточная длина: {length_ok}')\nprint(f'Есть цифра: {has_digit}')\nprint(f'Есть заглавные: {has_upper}')\nprint(f'Есть строчные: {has_lower}')\nprint(f'Пароль надежен: {length_ok and has_digit and has_upper and has_lower}')" }
      ],
      "Option": [
        "Пароль: Witcher3Best\nДлина: 12\nДостаточная длина: True\nЕсть цифра: True\nЕсть заглавные: True\nЕсть строчные: True\nПароль надежен: True",
        "Пароль: Witcher3Best\nДлина: 12\nДостаточная длина: True\nЕсть цифра: False\nЕсть заглавные: True\nЕсть строчные: True\nПароль надежен: False",
        "Пароль: Witcher3Best\nДлина: 11\nДостаточная длина: True\nЕсть цифра: True\nЕсть заглавные: True\nЕсть строчные: True\nПароль надежен: True",
        "Пароль: Witcher3Best\nДлина: 12\nДостаточная длина: True\nЕсть цифра: True\nЕсть заглавные: False\nЕсть строчные: True\nПароль надежен: False"
      ],
      "CorrectAnswer": [
        "Пароль: Witcher3Best\nДлина: 12\nДостаточная длина: True\nЕсть цифра: True\nЕсть заглавные: True\nЕсть строчные: True\nПароль надежен: True"
      ],
      "SupportHint": "Witcher3Best: 12 символов, содержит цифру 3, заглавную W, строчные буквы",
      "SupportAnswer": "Правильный ответ: Пароль: Witcher3Best\nДлина: 12\nДостаточная длина: True\nЕсть цифра: True\nЕсть заглавные: True\nЕсть строчные: True\nПароль надежен: True\n\nПошаговое выполнение:\n1. len('Witcher3Best') = 12 символов\n2. length_ok = 12 >= 8 → True\n3. has_digit = есть '3' → True\n4. has_upper = есть 'W' и 'B' → True\n5. has_lower = есть 'itcher', 'est' → True\n6. Все условия выполнены → пароль надежен\n\nМетоды isdigit(), isupper(), islower() проверяют типы символов.",
      "IsCode": false
    },
    {
      "Name": "Задание 7: Анализ магического рецепта",
      "Description": [
        { "Header": "Лаборатория алхимика" },
        { "Simple": "'Рецепт зелья защиты: \"Смешать: 3 части мандрагоры, 2 части паутины, 5 капель крови василиска. Варить 15 минут.\"'" },
        { "Simple": "Напиши программу, которая:\n1. Получит рецепт через input()\n2. Проанализирует его с помощью строковых методов\n3. Выведет информацию о рецепте\n\nПример ввода:\nСмешать: 3 части мандрагоры, 2 части паутины, 5 капель крови василиска. Варить 15 минут.\n\nПример вывода:\nДлина рецепта: 78\nВ нижнем регистре: смешать: 3 части мандрагоры, 2 части паутины, 5 капель крови василиска. варить 15 минут.\nКоличество ингредиентов: 3\nПозиция 'варить': 60\nРецепт содержит 'мандр': True\nРецепт заканчивается на 'минут.': True" },
        { "Simple": "Программа должна использовать input() БЕЗ текста приглашения." }
      ],
      "Option": [ "Смешать: 3 части мандрагоры, 2 части паутины, 5 капель крови василиска. Варить 15 минут." ],
      "CorrectAnswer": [
        "Длина рецепта: 78",
        "В нижнем регистре: смешать: 3 части мандрагоры, 2 части паутины, 5 капель крови василиска. варить 15 минут.",
        "Количество ингредиентов: 3",
        "Позиция 'варить': 60",
        "Рецепт содержит 'мандр': True",
        "Рецепт заканчивается на 'минут.': True"
      ],
      "SupportHint": "Используй len(), lower(), count(','), find(), 'in' оператор, endswith()",
      "SupportAnswer": "recipe = input()\n\nlength = len(recipe)\nlower_recipe = recipe.lower()\ningredients_count = recipe.count(',') + 1\ncook_pos = recipe.find('Варить')\ncontains_mandrake = 'мандр' in recipe\nends_with_minutes = recipe.endswith('минут.')\n\nprint(f'Длина рецепта: {length}')\nprint(f'В нижнем регистре: {lower_recipe}')\nprint(f'Количество ингредиентов: {ingredients_count}')\nprint(f\"Позиция 'варить': {cook_pos}\")\nprint(f\"Рецепт содержит 'мандр': {contains_mandrake}\")\nprint(f\"Рецепт заканчивается на 'минут.': {ends_with_minutes}\")",
      "IsCode": true
    },
    {
      "Name": "Эпилог: Сила слова в мире Python",
      "Description": [
        { "Header": "Завершение обучения строковой магии" },
        { "Simple": "'Превосходно!' - восхищается Йеннифэр. 'Ты освоил конкатенацию, индексацию и методы строк. Теперь ты можешь создавать любые текстовые заклинания и анализировать древние свитки.'" },
        { "Header": "Что ты освоил:" },
        { "Simple": "• Конкатенация строк через + и f-строки\n• Индексация и срезы [start:end:step]\n• Методы: upper(), lower(), strip(), split(), join()\n• Поиск: find(), index(), count()\n• Проверки: startswith(), endswith(), isdigit()\n• Замена: replace()" },
        { "Header": "Путь к условной магии" },
        { "Simple": "'Теперь,' - говорит Геральт, 'когда ты умеешь работать с текстом, пришло время изучить условия. Без ветвления логики не создать умного заклинания!' Лютик одобрительно кивает, перебирая струны лютни." }
      ],
      "Option": [],
      "CorrectAnswer": [],
      "SupportHint": "",
      "SupportAnswer": "",
      "IsCode": false
    }
  ]
}