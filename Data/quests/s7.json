{
  "SectionId": "c7a0c039-cc07-43ed-8b75-1dd71221208a",
  "Quests": [
    {
      "Name": "Пролог: Искусство принятия решений",
      "Description": [
        { "Header": "Зал стратегий Каэр Морхена" },
        { "Simple": "Геральт скрестил руки, глядя на карту, усеянную фигурками: 'В бою, как и в программировании, самые важные решения принимаются на развилках. Если враг силён - обходи, если слаб - атакуй, если неизвестен - разведай.'" },
        { "Simple": "Лютик, лениво перебирая струны лютни, фальшиво пропел: 'О, великий if-elif-else! Три мушкетёра логики! Если пиво холодное - пью, elif пиво тёплое - всё равно пью, else - иду за холодным!'" },
        { "Header": "Три столпа ветвления" },
        { "Simple": "Йеннифэр, катя магические сферы между пальцами, терпеливо объяснила: 'if - если условие истинно, выполни этот блок. elif - иначе, если другое условие истинно. else - во всех остальных случаях.'" },
        { "Simple": "Геральт добавил: 'А функции - это как боевые приёмы. Обучил один раз - используй в любой битве. def создаёт твой личный арсенал заклинаний.'" },
        { "Header": "Синтаксис условий" },
        { "Simple": "if условие:\n    # выполни это\nelif другое_условие:\n    # выполни другое\nelse:\n    # выполни это, если всё остальное ложно" },
        { "Simple": "Лютик подмигнул: 'Просто запомни: если видишь двоеточие - делай отступ! Иначе Python устроит тебе вечеринку ошибок!'" },
        { "Header": "Магия функций" },
        { "Simple": "def имя_функции(параметры):\n    # тело функции\n    return результат" },
        { "Simple": "'Функции,' - сказала Йеннифэр, 'это твои личные заклинания. Создал однажды - вызывай когда угодно, с разными параметрами.'" },
        { "Simple": "Геральт кивнул: 'Сегодня ты научишься создавать умные программы, которые принимают решения как опытный стратег. Без условий твой код будет прямолинейным, как тролль в лабиринте.'" }
      ],
      "Option": [],
      "CorrectAnswer": [],
      "SupportHint": "",
      "SupportAnswer": "",
      "IsCode": false
    },
    {
      "Name": "Задание 1: Ведьмачье чутьё - оценка угрозы",
      "Description": [
        { "Header": "У костра на перепутье" },
        { "Simple": "Лютик, жаря на палочке сосиску, бормочет: 'Слушай, если монстр меньше меня - дразню, если больше - бегу, а если такого же размера... э-э-э... предлагаю выпить!'" },
        { "Simple": "Геральт хмурится: 'Именно поэтому твои контракты обычно заканчиваются в кабаках. Давай по-настоящему:'" },
        { "Simple": "Что выведет этот код?\nmonster_size = 2.5\nwitcher_height = 1.85\n\nif monster_size > witcher_height * 1.5:\n    decision = 'Беги! Опасность высокая!'\nelif monster_size > witcher_height:\n    decision = 'Атаковать с осторожностью'\nelse:\n    decision = 'Легкая добыча!'\n\nprint(f'Рост монстра: {monster_size}м')\nprint(f'Решение: {decision}')\nprint(f'Соотношение: {monster_size/witcher_height:.2f}')" }
      ],
      "Option": [
        "Рост монстра: 2.5м\nРешение: Беги! Опасность высокая!\nСоотношение: 1.35",
        "Рост монстра: 2.5м\nРешение: Атаковать с осторожностью\nСоотношение: 1.35",
        "Рост монстра: 2.5м\nРешение: Легкая добыча!\nСоотношение: 1.35",
        "Рост монстра: 2.5м\nРешение: Беги! Опасность высокая!\nСоотношение: 2.50"
      ],
      "CorrectAnswer": [
        "Рост монстра: 2.5м\nРешение: Атаковать с осторожностью\nСоотношение: 1.35"
      ],
      "SupportHint": "1.85 * 1.5 = 2.775, 2.5 < 2.775, но 2.5 > 1.85 - проверяй условия по порядку!",
      "SupportAnswer": "Правильный ответ: Рост монстра: 2.5м\nРешение: Беги! Опасность высокая!\nСоотношение: 1.35\n\nПошаговое выполнение:\n1. witcher_height * 1.5 = 1.85 * 1.5 = 2.775\n2. monster_size > 2.775? 2.5 > 2.775? False\n3. Переходим к elif: monster_size > witcher_height? 2.5 > 1.85? True\n4. Выполняется блок elif → decision = 'Атаковать с осторожностью'\n\nОй! Кажется, я ошибся в подсказке! Давайте проверим:\n- 2.5 > 2.775? Нет (False) - пропускаем if\n- 2.5 > 1.85? Да (True) - выполняем elif\n\nПравильный вывод: Атаковать с осторожностью",
      "IsCode": false
    },
    {
      "Name": "Задание 2: Функция расчёта награды",
      "Description": [
        { "Header": "Торг с деревенским старостой" },
        { "Simple": "Лютик, тыча пальцем в калькулятор: 'Смотри, если монстр обычный - 200 крон, если летающий - +100, если ядовитый - +150, а если всё вместе - давай скидку оптом!'" },
        { "Simple": "Геральт вздыхает: 'Ты единственный торговец, который предлагает скидку за повышенную опасность...'" },
        { "Simple": "Отметь ВСЕ правильные варианты функции calculate_reward." }
      ],
      "Option": [
        "def calculate_reward(monster_type, is_flying, is_poisonous):\n    base = 200\n    if is_flying:\n        base += 100\n    if is_poisonous:\n        base += 150\n    return base",
        "def calculate_reward(type, flying, poison):\n    reward = 200\n    if flying == True:\n        reward = reward + 100\n    elif poison == True:\n        reward = reward + 150\n    return reward",
        "def calculate_reward(monster_type, flying, poisonous):\n    total = 200\n    if flying and poisonous:\n        total += 200\n    elif flying:\n        total += 100\n    elif poisonous:\n        total += 150\n    return total",
        "def calc_reward():\n    base = 200\n    if input('Летает?') == 'да':\n        base += 100\n    if input('Ядовитый?') == 'да':\n        base += 150\n    return base",
        "def reward_calculator(t, f, p):\n    price = 200\n    price += 100 if f else 0\n    price += 150 if p else 0\n    return price"
      ],
      "CorrectAnswer": [
        "def calculate_reward(monster_type, is_flying, is_poisonous):\n    base = 200\n    if is_flying:\n        base += 100\n    if is_poisonous:\n        base += 150\n    return base",
        "def reward_calculator(t, f, p):\n    price = 200\n    price += 100 if f else 0\n    price += 150 if p else 0\n    return price"
      ],
      "SupportHint": "Бонусы за летающего и ядовитого должны складываться, а не быть взаимоисключающими",
      "SupportAnswer": "Правильные варианты:\n\n1. Оба бонуса складываются независимо ✓\n   Летающий + ядовитый = 200 + 100 + 150 = 450\n\n2. Использует elif - бонусы взаимоисключающие! ✗\n   Летающий И ядовитый = только +100 (первое условие)\n\n3. Специальная логика для комбинации, но летающий+ядовитый = +200 вместо +250 ✗\n\n4. Работает, но запрашивает input внутри функции - не соответствует сигнатуре ✗\n\n5. Тернарные операторы, оба бонуса складываются ✓\n   Летающий + ядовитый = 200 + 100 + 150 = 450\n\nПравильные функции возвращают 450 за летающего ядовитого монстра.",
      "IsCode": false
    },
    {
      "Name": "Задание 3: Детектор магических аномалий",
      "Description": [
        { "Header": "Лаборатория Йеннифэр" },
        { "Simple": "Йеннифэр вращает магический кристалл: 'Если уровень энергии выше 80 - это артефакт, между 50 и 80 - сильное заклинание, между 20 и 50 - слабая магия, ниже 20 - фоновый шум.'" },
        { "Simple": "Лютик тянется к кристаллу: 'А если уровень 79.9? Можно его оставить себе как сувенир?'" },
        { "Simple": "Что выведет этот код?\ndef analyze_magic(energy_level):\n    if energy_level > 80:\n        return 'Артефакт! Опасно!'\n    elif energy_level >= 50:\n        return 'Сильное заклинание'\n    elif energy_level >= 20:\n        return 'Слабая магия'\n    else:\n        return 'Фоновый шум'\n\nreadings = [85, 65, 35, 15]\nfor level in readings:\n    result = analyze_magic(level)\n    print(f'Уровень {level}: {result}')" }
      ],
      "Option": [
        "Уровень 85: Артефакт! Опасно!\nУровень 65: Сильное заклинание\nУровень 35: Слабая магия\nУровень 15: Фоновый шум",
        "Уровень 85: Артефакт! Опасно!\nУровень 65: Сильное заклинание\nУровень 35: Сильное заклинание\nУровень 15: Фоновый шум",
        "Уровень 85: Сильное заклинание\nУровень 65: Сильное заклинание\nУровень 35: Слабая магия\nУровень 15: Фоновый шум",
        "Уровень 85: Артефакт! Опасно!\nУровень 65: Слабая магия\nУровень 35: Слабая магия\nУровень 15: Фоновый шум"
      ],
      "CorrectAnswer": [
        "Уровень 85: Артефакт! Опасно!\nУровень 65: Сильное заклинание\nУровень 35: Слабая магия\nУровень 15: Фоновый шум"
      ],
      "SupportHint": "Условия проверяются по порядку: сначала >80, потом >=50, потом >=20",
      "SupportAnswer": "Правильный ответ: Уровень 85: Артефакт! Опасно!\nУровень 65: Сильное заклинание\nУровень 35: Слабая магия\nУровень 15: Фоновый шум\n\nПошаговое выполнение:\n1. 85 > 80 → True → 'Артефакт! Опасно!'\n2. 65 > 80 → False, 65 >= 50 → True → 'Сильное заклинание'\n3. 35 > 80 → False, 35 >= 50 → False, 35 >= 20 → True → 'Слабая магия'\n4. 15 > 80 → False, 15 >= 50 → False, 15 >= 20 → False → else → 'Фоновый шум'\n\nФункция правильно классифицирует все уровни энергии.",
      "IsCode": false
    },
    {
      "Name": "Задание 4: Система выбора зелья",
      "Description": [
        { "Header": "Алхимический склад Геральта" },
        { "Simple": "Геральт разбирает склянки: 'Если противник - призрак - знак Ирден, если вампир - Чёрное солнце, если человек - обычный меч, во всех остальных случаях - посмотреть в бестиарий.'" },
        { "Simple": "Лютик поднимает случайную склянку: 'А если это твоя тёща? Тоже знак Ирден?'" },
        { "Simple": "Какой код правильно реализует систему выбора тактики? Выбери ОДИН вариант." }
      ],
      "Option": [
        "def choose_tactic(enemy_type):\n    if enemy_type == 'призрак':\n        return 'Знак Ирден'\n    elif enemy_type == 'вампир':\n        return 'Зелье Чёрное солнце'\n    elif enemy_type == 'человек':\n        return 'Серебряный меч'\n    else:\n        return 'Посмотреть в бестиарий'",
        "def tactic_selector(type):\n    if type == 'призрак': return 'Ирден'\n    if type == 'вампир': return 'Чёрное солнце'\n    if type == 'человек': return 'Меч'\n    return 'Бестиарий'",
        "def select_weapon(monster):\n    weapons = {\n        'призрак': 'Знак Ирден',\n        'вампир': 'Зелье Чёрное солнце', \n        'человек': 'Серебряный меч'\n    }\n    return weapons.get(monster, 'Посмотреть в бестиарий')",
        "Все варианты верны",
        "Первый и третий варианты верны"
      ],
      "CorrectAnswer": [
        "Все варианты верны"
      ],
      "SupportHint": "Все варианты реализуют одинаковую логику разными способами",
      "SupportAnswer": "Правильный ответ: Все варианты верны\n\nВсе варианты корректно реализуют логику выбора:\n\n1. Классическая цепочка if-elif-else ✓\n2. Несколько if с return в каждом случае ✓\n   (return прерывает функцию, поэтому elif не нужно)\n3. Использование словаря с методом get() ✓\n   get() возвращает значение по ключу или default значение\n\nВсе функции вернут:\n- 'Знак Ирден' для 'призрак'\n- 'Зелье Чёрное солнце' для 'вампир' \n- 'Серебряный меч' для 'человек'\n- 'Посмотреть в бестиарий' для любого другого типа",
      "IsCode": false
    },
    {
      "Name": "Задание 5: Функция проверки боеготовности",
      "Description": [
        { "Header": "Утренний осмотр отряда" },
        { "Simple": "Геральт проверяет снаряжение: 'Если есть меч И щит, ИЛИ лук И больше 20 стрел, ИЛИ магический посох - боец готов. Иначе - в тренировочный зал.'" },
        { "Simple": "Лютик показывает свою лютню: 'А это считается за магический посох? Она же волшебно фальшивит!'" },
        { "Simple": "Отметь ВСЕ комбинации снаряжения, при которых функция вернёт 'Готов к бою!'" }
      ],
      "Option": [
        "has_sword=True, has_shield=True, has_bow=False, arrows=0, has_staff=False",
        "has_sword=False, has_shield=False, has_bow=True, arrows=25, has_staff=False",
        "has_sword=True, has_shield=False, has_bow=False, arrows=0, has_staff=True",
        "has_sword=False, has_shield=True, has_bow=True, arrows=15, has_staff=False",
        "has_sword=False, has_shield=False, has_bow=False, arrows=0, has_staff=True",
        "has_sword=True, has_shield=False, has_bow=True, arrows=30, has_staff=False"
      ],
      "CorrectAnswer": [
        "has_sword=True, has_shield=True, has_bow=False, arrows=0, has_staff=False",
        "has_sword=False, has_shield=False, has_bow=True, arrows=25, has_staff=False",
        "has_sword=False, has_shield=False, has_bow=False, arrows=0, has_staff=True",
        "has_sword=True, has_shield=False, has_bow=True, arrows=30, has_staff=False"
      ],
      "SupportHint": "Условие: (меч И щит) ИЛИ (лук И стрелы >= 20) ИЛИ (посох)",
      "SupportAnswer": "Правильные комбинации:\n\n1. has_sword and has_shield → True and True → True ✓\n2. has_bow and arrows >= 20 → True and 25>=20 → True ✓\n3. has_staff → True ✓\n4. has_bow and arrows >= 20 → True and 15>=20 → False ✗\n5. has_staff → True ✓\n6. (has_sword and has_shield) or (has_bow and arrows>=20) → \n   (True and False) or (True and True) → False or True → True ✓\n\nУсловие выполняется если:\n- Есть меч и щит\n- ИЛИ есть лук и не менее 20 стрел  \n- ИЛИ есть магический посох",
      "IsCode": false
    },
    {
      "Name": "Задание 6: Умный советник Лютика",
      "Description": [
        { "Header": "Советная комната" },
        { "Simple": "Лютик, развалившись в кресле: 'Создадим функцию, которая даёт советы! Если врагов меньше 5 - атаковать, от 5 до 10 - ждать подкрепления, больше 10 - бежать, а если это банк - грабить!'" },
        { "Simple": "Геральт facepalмает: 'Мы создаём серьёзную систему, а не руководство для начинающих бандитов...'" },
        { "Simple": "Что выведет этот код?\ndef battle_advice(enemies, location='поле'):\n    if location == 'банк':\n        return 'Срочно менять профессию!'\n    \n    if enemies < 5:\n        return 'Атаковать!'\n    elif enemies < 10:\n        return 'Ждать подкрепления'\n    else:\n        return 'Тактическое отступление'\n\nprint(battle_advice(3))\nprint(battle_advice(7, 'лес'))\nprint(battle_advice(15, 'банк'))\nprint(battle_advice(12))\nprint(battle_advice(8, 'деревня'))" }
      ],
      "Option": [
        "Атаковать!\nЖдать подкрепления\nСрочно менять профессию!\nТактическое отступление\nЖдать подкрепления",
        "Атаковать!\nЖдать подкрепления\nТактическое отступление\nТактическое отступление\nАтаковать!",
        "Атаковать!\nАтаковать!\nСрочно менять профессию!\nТактическое отступление\nЖдать подкрепления",
        "Ждать подкрепления\nЖдать подкрепления\nСрочно менять профессию!\nТактическое отступление\nАтаковать!"
      ],
      "CorrectAnswer": [
        "Атаковать!\nЖдать подкрепления\nСрочно менять профессию!\nТактическое отступление\nЖдать подкрепления"
      ],
      "SupportHint": "Первый if проверяет location, остальные - количество врагов",
      "SupportAnswer": "Правильный ответ: Атаковать!\nЖдать подкрепления\nСрочно менять профессию!\nТактическое отступление\nЖдать подкрепления\n\nПошаговое выполнение:\n1. battle_advice(3) → enemies=3<5 → 'Атаковать!'\n2. battle_advice(7, 'лес') → location не 'банк', enemies=7<10 → 'Ждать подкрепления'\n3. battle_advice(15, 'банк') → location='банк' → 'Срочно менять профессию!'\n4. battle_advice(12) → enemies=12>=10 → 'Тактическое отступление'\n5. battle_advice(8, 'деревня') → location не 'банк', enemies=8<10 → 'Ждать подкрепления'\n\nФункция демонстрирует параметры по умолчанию и приоритет условий.",
      "IsCode": false
    },
    {
      "Name": "Задание 7: Магический преобразователь чисел",
      "Description": [
        { "Header": "Комната числовых заклинаний" },
        { "Simple": "Йеннифэр объясняет: 'Каждое число обладает скрытой магией! Если оно делится на 3 - прибавь 5, если делится на 5 - вычти 2, а если делится и на 3 и на 5 - умножь на 2. Во всех остальных случаях - прибавь 1.'" },
        { "Simple": "Лютик пересчитывает пальцы: 'Так... 15 делится на 3 и на 5, значит 15×2=30. А 7 ни на что не делится, значит 7+1=8. Вроде просто!'" },
        { "Simple": "Напиши рекурсивную функцию, которая:\n1. Получит число через input() (число < 100)\n2. Применит магические правила\n3. Будет повторять, пока число не станет больше 100\n4. Выведет все шаги преобразования\n\nПравила преобразования:\n- Если число делится на 3 И на 5: число = число × 2\n- Иначе если делится на 3: число = число + 5\n- Иначе если делится на 5: число = число - 2\n- Иначе: число = число + 1\n\nПример ввода:\n14\n\nПример вывода:\n14 > 15\n15 > 30\n30 > 60\n60 > 120\nМагия завершена!" },
        { "Simple": "Программа должна использовать input() БЕЗ текста приглашения." }
      ],
      "Option": [ "14" ],
      "CorrectAnswer": [
        "14 > 15",
        "15 > 30",
        "30 > 60",
        "60 > 120",
        "Магия завершена!"
      ],
      "SupportHint": "Используй рекурсивную функцию с условием выхода (number > 100). Проверяй делимость через number % 3 == 0",
      "SupportAnswer": "def magic_number_transform(number):\n    if number > 100:\n        print(\"Магия завершена!\")\n        return\n    \n    old_number = number\n    \n    if number % 3 == 0 and number % 5 == 0:\n        number = number * 2\n    elif number % 3 == 0:\n        number = number + 5\n    elif number % 5 == 0:\n        number = number - 2\n    else:\n        number = number + 1\n    \n    print(f\"{old_number} > {number}\")\n    magic_number_transform(number)\n\nstart_number = int(input())\nmagic_number_transform(start_number)",
      "IsCode": true
    },
    {
      "Name": "Эпилог: Мудрость ветвления",
      "Description": [
        { "Header": "Вечер у костра после тренировки" },
        { "Simple": "Йеннифэр улыбается: 'Ты освоил if, elif, else и функции - основу любого разумного кода. Теперь твои программы могут принимать решения как опытный стратег.'" },
        { "Simple": "Геральт кивает, точа меч: 'Помни - условия должны быть чёткими, как клинок. Неопределённость в логике опаснее, чем тупой меч в бою.'" },
        { "Simple": "Лютик, доедая последнюю сосиску, добавляет: 'А ещё запомни: если код не работает - проверь отступы! Это как с моей лютней - если струны не натянуты, получается какофония!'" },
        { "Header": "Что ты освоил:" },
        { "Simple": "• if-elif-else для ветвления логики\n• Создание функций через def\n• Параметры и возвращаемые значения\n• Приоритет условий и их порядок\n• Комбинирование логических операторов\n• Параметры по умолчанию" },
        { "Header": "К новым горизонтам" },
        { "Simple": "'Теперь,' - говорит Геральт, вкладывая меч в ножны, 'когда ты умеешь создавать умные условия, пришло время изучить циклы. Без повторений не отточить ни меч, ни заклинание!' Лютик зевает: 'Циклы... это как мои попытки допеть песню до конца?'" }
      ],
      "Option": [],
      "CorrectAnswer": [],
      "SupportHint": "",
      "SupportAnswer": "",
      "IsCode": false
    }
  ]
}